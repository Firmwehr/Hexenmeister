#!/usr/bin/env python3

import argparse
import json
import re
import subprocess
import sys
import time
import traceback
from dataclasses import dataclass
from pathlib import Path
from typing import Any, Dict, Optional

OWN_DIR: Path = Path(__file__).resolve().parent
CAPTURE_OUTPUT = True # Turn off for debugging

# Whichever comes first
TIME_PER_BENCH = 10.0 # seconds
ITERATIONS_PER_BENCH = 100

def eprint(s: str):
    print(s, file=sys.stderr)

class Input:
    def __init__(self):
        self.path: Optional[Path] = None
        self.out: Optional[Path] = None

class File:
    def __init__(self):
        self.path: Optional[Path] = None
        self.out: Optional[Path] = None
        self.inputs: Dict[int, Input] = {}

def base(path: Path) -> str:
    return path.name.split(".")[0]

def load_files(at: Path) -> Dict[str, File]:
    files: Dict[str, File] = {}

    for path in at.iterdir():
        if not path.is_file():
            continue

        name = path.name
        if name == ".keep":
            pass
        elif re.fullmatch(r".*\.(java|mj)", name):
            file = files.setdefault(base(path), File())
            file.path = path
        elif match := re.fullmatch(r".*\.(\d+)\.inputc", name):
            file = files.setdefault(base(path), File())
            n = int(match.group(1))
            i = file.inputs.setdefault(n, Input())
            i.path = path
        elif match := re.fullmatch(r".*\.(\d+)\.inputc.out", name):
            file = files.setdefault(base(path), File())
            n = int(match.group(1))
            i = file.inputs.setdefault(n, Input())
            i.out = path
        elif re.fullmatch(r".*\.out", name):
            file = files.setdefault(base(path), File())
            file.out = path
        else:
            raise Exception(f"No idea what kind of file {name!r} is")

    # Quick sanity-check
    for name, file in sorted(files.items()):
        assert file.path is not None, "source file missing"
        if file.out is not None:
            assert not file.inputs, "out file and input file both present"
        if file.inputs:
            assert not file.out, "out file and input file both present"
        for i in file.inputs.values():
            assert i.path is not None, "input file missing"

    return files

def run_once(i: str, o: Optional[str]) -> float:
    t1 = time.time()
    result = subprocess.run(["./a.out"], input=i,
            text=True, capture_output=CAPTURE_OUTPUT, check=True)
    t2 = time.time()
    if o is not None:
        assert o == result.stdout, "incorrect output"
    return t2 - t1

def run(i: Optional[Path], o: Optional[Path]) -> Dict[str, Any]:
    istr: str
    if i is None:
        istr = ""
    else:
        with open(i) as f:
            istr = f.read()

    ostr: Optional[str]
    if o is None:
        ostr = None
    else:
        with open(o) as f:
            ostr = f.read()

    values = []

    t0 = time.time()
    for _ in range(ITERATIONS_PER_BENCH):
        try:
            values.append(run_once(istr, ostr))
        except Exception:
            return {"error": f"Something went wrong during execution:\n{traceback.format_exc()}"}
        if time.time() - t0 > TIME_PER_BENCH:
            break

    return {"unit": "s", "interpretation": "LESS_IS_BETTER", "values": values}

def bench(result: Dict[str, Any], testrepo: Path, name: str, file: File):
    # Produces a.out in current directory
    assert file.path is not None, "source file missing" # Only here for mypy
    eprint(f"==> Building {name}")
    subprocess.run([testrepo / "run", file.path],
            stdout=sys.stderr, stderr=sys.stderr, check=True)

    if file.inputs:
        for n, i in sorted(file.inputs.items()):
            eprint(f"==> Running input {n} for {name}")
            result[f"{name}.{n}"] = run(i.path, i.out)
    else:
        eprint(f"==> Running {name}")
        result[name] = run(None, file.out)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("testrepo", type=Path)
    parser.add_argument("--no-small", action="store_true")
    parser.add_argument("--no-big", action="store_true")
    args = parser.parse_args()

    eprint("==> Running compiler build script")
    subprocess.run([args.testrepo / "build"],
            stdout=sys.stderr, stderr=sys.stderr, check=True)

    result = {"small": {}, "big": {}}

    if not args.no_small:
        small = load_files(OWN_DIR / "exec")
        eprint(f"==> Running tests for {len(small)} small files")
        for name, file in sorted(small.items()):
            bench(result["small"], args.testrepo, name, file)

    # if not args.no_big:
    #     big = load_files(OWN_DIR / "exec" / "big")
    #     eprint(f"==> Running tests for {len(big)} big files")
    #     for name, file in sorted(big.items()):
    #         bench(result["big"], args.testrepo, name, file)

    print(json.dumps(result))

if __name__ == "__main__":
    main()
